import os

# settings
default_hardware = "stm32f3_discovery"
hardware_path = os.path.join('.', 'hardware')

available_hardware = {
	# name                 source directory     define                        project config
	'stm32f3_discovery': ['stm32f3_discovery', 'HARDWARE_STM32F3_DISCOVERY', 'stm32f3_discovery.cfg'],
	'hosted':            ['hosted',            'HARDWARE_HOSTED',            'hosted.cfg'],
}

# choose hardware
hardware_name = ARGUMENTS.get('hardware', default_hardware)
if hardware_name not in available_hardware:
	print("Error: Hardware '{}' is not available in src/hardware/!".format(hardware))
	Exit(1)
hardware = available_hardware[hardware_name]

# calculate ignore paths based on hardware chosen
ignore_paths = [os.path.join('.', 'hardware', p) for p in next(os.walk(hardware_path))[1] if p != hardware[0]]

configfile = os.path.join('cfg', hardware[2])

############## unittest ######################################################
# create xpcc environment
env = Environment(tools = ['xpcc'],
	toolpath = ['../xpcc/scons/site_tools'],
	configfile=os.path.join('cfg', 'unittest_hosted.cfg'))
# build the xpcc library
env.XpccLibrary()
# create a file called 'defines.hpp' with all preprocessor defines if necessary
env.Defines()
# creates xpcc_git_info.hpp
env.GitInfoHeader()
# creates xpcc_build_info.hpp
env.BuildInfoHeader()

# always build unittests for hosted
ut_ignore_paths = [os.path.join('.', 'hardware', p) for p in next(os.walk(hardware_path))[1] if p != 'hosted']
unittest_files =  env.FindFiles('.', unittest=True)

# declare a file which later runs all the tests
template = '../xpcc/templates/unittest/runner_hosted.cpp.in'
runner = env.UnittestRunner(target = env.Buildpath('runner.cpp'),
							source = unittest_files.header,
							template = template)

sources = env.FindFiles('.', ignore=ut_ignore_paths + ['main.cpp']).sources
sources.append(runner)
unittest = env.Program(
	target=env['XPCC_CONFIG']['general']['name'] + ".unittest",
	source=sources)

env.Alias('build_unittest', unittest)
env.Alias('unittest', env.Run(unittest))

############## regular program ###############################################
# create xpcc environment
env = Environment(tools = ['xpcc'],
	toolpath = ['../xpcc/scons/site_tools'],
	configfile=configfile)
# build the xpcc library
env.XpccLibrary()
# create a file called 'defines.hpp' with all preprocessor defines if necessary
env.Defines()
# creates xpcc_git_info.hpp
env.GitInfoHeader()
# creates xpcc_build_info.hpp
env.BuildInfoHeader()

# find all source files
files = env.FindFiles('.', ignore=ignore_paths + ['test'])

# add hardware specific define
env.Append(CPPDEFINES = {hardware[1]: '1'})

# build the program
program = env.Program(target = env['XPCC_CONFIG']['general']['name'], source = files.sources)


env.Alias('size', env.Size(program))
env.Alias('symbols', env.Symbols(program))
env.Alias('defines', env.ShowDefines())

hexfile = env.Hex(program)

env.Alias('program', env.OpenOcd(program))
env.Alias('build', [hexfile, env.Listing(program)])
env.Alias('all', ['build', 'size'])

env.Default('all')
